{
    "name": "Dijkstra",
    "preview": "Algoritmul lui Dijkstra pentru Cea Mai Scurtă Cale",
    "text": "# Algoritmul lui Dijkstra pentru Cea Mai Scurtă Cale\n\nAlgoritmul lui Dijkstra este un algoritm clasic utilizat pentru găsirea celei mai scurte căi între două noduri într-un graf ponderat, cu toate ponderile pozitive. Este numit după informaticianul olandez Edsger W. Dijkstra și este utilizat într-o varietate de aplicații, de la rețele de calculatoare până la planificarea căilor în hărți.\n\n## Cum Funcționează Algoritmul\n\n1. **Inițializare**: Se începe prin a seta distanța de la nodul sursă la toate celelalte noduri ca fiind infinit și distanța de la nodul sursă la el însuși ca fiind 0.\n\n2. **Selecție Nodului Curent**: Se selectează nodul cu cea mai mică distanță nevizitată și se marchează ca vizitat.\n\n3. **Actualizare Distanțelor**: Pentru fiecare vecin nevizitat al nodului curent, se calculează distanța totală de la nodul sursă prin nodul curent până la vecin. Dacă această distanță este mai mică decât distanța curentă stocată pentru vecin, aceasta este actualizată.\n\n4. **Repetiție**: Se repetă pașii 2 și 3 până când toate nodurile au fost marcate ca vizitate sau distanțele către toate nodurile au fost actualizate.\n\n5. **Calea Cea Mai Scurtă**: După ce toate distanțele au fost calculate, calea cea mai scurtă de la nodul sursă la orice alt nod poate fi reconstruită urmărindu-i predecesorii, care sunt înregistrați pe parcursul procesului.\n\n## Implementare în Pseudo-Cod\n\n```plaintext\nDijkstra(graph, source):\n    initialize_distances(graph, source)\n    create_priority_queue(Q, graph)\n    \n    while Q is not empty:\n        current_node = extract_min(Q)\n        mark_as_visited(current_node)\n        \n        for each neighbor of current_node:\n            update_distance(neighbor)\n    \n    return distances\n"
}